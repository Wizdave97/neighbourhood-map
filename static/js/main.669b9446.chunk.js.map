{"version":3,"sources":["components/mapContainer/mapcontainer.module.css","components/ListView/listview.module.css","app.module.css","components/ListView/searchInput/searchInput.module.css","components/map/map.module.css","menu.svg","components/ListView/listitem.module.css","App.js","components/map/Map.js","components/Marker/Marker.js","components/InfoWindow.js","components/streetView/StreetView.js","components/mapContainer/mapContainer.js","components/ListView/searchInput/SearchInput.js","components/ListView/ListItem.js","components/ListView/ListView.js","components/PlaceDetails/PlaceDetails.js","serviceWorker.js","index.js"],"names":["module","exports","map","menu","listContainer","list","closeButton","container","loader","load2","search","filter","searchContainer","__webpack_require__","p","listitem","infoWindow","currentMarker","Map","props","styles","featureType","stylers","color","elementType","weight","lightness","hue","visibility","window","addEventListener","googleMapsLoaded","google","maps","document","getElementById","id","center","lat","lng","zoom","streetViewControl","mapTypeControl","initMap","react_default","a","createElement","className","classes","createMarker","Marker","position","title","name","animation","Animation","DROP","createInfoWindow","InfoWindow","createStreetView","StreetViewService","getPanorama","location","radius","data","status","panorama","StreetViewPanorama","setPano","pano","setPov","heading","geometry","spherical","computeHeading","latLng","pitch","setVisible","textContent","markers","MapContainer","state","bounds","_this","LatLngBounds","createMarkers","marker","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","locations","Symbol","iterator","next","done","value","push","extend","err","return","renderMarkers","length","_arr","_i","setMap","currentLocationNames","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","place","_loop","i","includes","setTimeout","fitBounds","populateInfoWindow","_arr2","_i2","addListener","this","_arr3","_i3","setAnimation","self","setContent","concat","open","BOUNCE","openList","querySelector","style","width","_this2","onClick","src","Menu","alt","map_Map","React","PureComponent","type","query","onChange","event","onQueryUpdate","target","placeholder","listItem","tabIndex","moreInfo","listView","SearchInput","index","ListItem","key","placeDetailsService","placeDetailService","places","PlacesService","Promise","resolve","reject","textSearch","result","getDetails","placeId","place_id","fields","results","opening_hours","photos","App","errorLoadingData","onScriptload","Object","assertThisInitialized","s","body","appendChild","setState","updateQuery","v","then","html","open_now","weekday_text","getUrl","maxHeight","maxWidth","console","log","catch","_ret","fetch","method","response","json","meta","code","items","groups","item","details","venue","error","matchingLocations","content","matcher","RegExp","test","reload","ListView","mapContainer","Boolean","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.669b9446.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"mapcontainer_map__1ArPN\",\"menu\":\"mapcontainer_menu__1-qtP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listContainer\":\"listview_listContainer__6JEmv\",\"list\":\"listview_list__3tbyZ\",\"closeButton\":\"listview_closeButton__BMvhY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__2zsb9\",\"loader\":\"app_loader__13qo2\",\"load2\":\"app_load2__2hw6A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"searchInput_search__2DTGd\",\"filter\":\"searchInput_filter__1tZ6I\",\"searchContainer\":\"searchInput_searchContainer__1PSWz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"map_map__2wQDv\"};","module.exports = __webpack_public_path__ + \"static/media/menu.1d40ec10.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listitem\":\"listitem_listitem__2KW6h\"};","import React  from 'react';\nimport classes from './app.module.css';\nimport MapContainer from './components/mapContainer/mapContainer';\nimport ListView from './components/ListView/ListView';\nimport { createInfoWindow } from './components/InfoWindow';\nimport { placeDetailsService } from './components/PlaceDetails/PlaceDetails';\nlet infoWindow;\nlet currentMarker;\nclass App extends React.PureComponent {\n  state={\n    locations:[],\n    errorLoadingData:false,\n    googleMapsLoaded:false,\n    google:null,\n    menu:false,\n    query:''\n  }\n\n  componentDidMount(){\n    this.onScriptload()\n    //Fetch location details from Foursquare Database and add it to the app State\n    fetch('https://api.foursquare.com/v2/venues/explore?near=London,UK&client_id=0TTKXNKQVRBEFNZCJM4YK0KU5N2OZF5XPWPEWJBK4YDS0G2P&client_secret=S2MNT5NTVP0BCSON4XBK51VFQKHJKW4UTUSKQGMII5XK1KUT&v=20190320',\n          {method:'GET'}).then(response=>response.json()).then(\n            response=> {\n              if(response.meta.code===200){\n                let locations=[]\n                let items=response.response.groups[0].items;\n                if(items.length===0) return\n                for(let item of items) {\n                  let details={}\n                  details.position={lat:item.venue.location.lat,lng:item.venue.location.lng};\n                  details.id=item.venue.id;\n                  details.name=item.venue.name;\n                  locations.push(details)\n                }\n                this.setState({\n                  locations:locations\n                })\n              }\n            }\n          ).catch(error=> this.setState(state=>({\n            errorLoadingData:!state.errorLoadingData\n          })))\n  }\n  // this function loads the google maps JavaScript API and adds it to the state and the global window object\n  onScriptload=()=>{\n    const self=this;\n    let s =document.createElement('script')\n        s.src=\"https://maps.googleapis.com/maps/api/js?libraries=places,geometry,drawing&key=AIzaSyB590AsZEOF1dkep0N-vvAJ4PZHfpN_hxw&v=3\"\n        document.body.appendChild(s)\n        s.addEventListener('load',function() {\n            infoWindow=createInfoWindow();\n\n            self.setState(state=>({\n              googleMapsLoaded:!state.googleMapsLoaded,\n              google:window.google\n            }))\n        })\n  }\n  updateQuery =(query)=>{\n    this.setState({\n      query:query\n    })\n  }\n  moreInfo =(id)=>{\n\n    for(let marker of window.markers){\n      marker.setAnimation(null)\n      if(marker.id===id){\n        if(currentMarker===marker) return\n        placeDetailsService(marker.title).then(results=>{\n          let html=`${marker.title}<br>`;\n          if(results) {\n            if(results.opening_hours){\n              html+=`<div>\n                ${results.opening_hours.open_now?'Open Now<br>':'Closed<br>'}\n                ${results.opening_hours.weekday_text[0]}<br>\n                ${results.opening_hours.weekday_text[1]}<br>\n                ${results.opening_hours.weekday_text[2]}<br>\n                ${results.opening_hours.weekday_text[3]}<br>\n                ${results.opening_hours.weekday_text[4]}<br>\n                ${results.opening_hours.weekday_text[5]}<br>\n              </div>`\n            }\n            if(results.photos){\n              html+=`<img src='${results.photos[0].getUrl({maxHeight:100,maxWidth:200})}'>`\n            }\n            infoWindow.setContent(html)\n          }\n          else {\n            infoWindow.setContent(`${marker.title}`)\n            console.log(results)\n          }\n          infoWindow.open(window.map, marker)\n          marker.setAnimation(window.google.maps.Animation.BOUNCE)\n        }).catch(err=>{\n            infoWindow.setContent(`${marker.title}`)\n        })\n        currentMarker=marker;\n        infoWindow.addListener('closeclick',function(){\n          marker.setAnimation(null)\n        })\n      }\n    }\n  }\n\n  render() {\n    let matcher= new RegExp(`${this.state.query}`,'gi');\n    let matchingLocations;\n    if(this.state.query) {\n      matchingLocations=this.state.locations.filter(location=>{\n        return matcher.test(location.name)\n      });\n    }\n    else{\n      matchingLocations=this.state.locations\n    }\n    let content;\n    if(this.state.errorLoadingData && !this.state.googleMapsLoaded) content=(<div><h4>Network error check your connection and refresh{setTimeout(()=>{window.location.reload()},3000)}</h4></div>)\n    else if(!this.state.googleMapsLoaded)   content=(<div className={classes.loader}>Loading...</div>)\n    else if(this.state.googleMapsLoaded){\n      //console.log(this.state.google)\n      content=(<div className={classes.container}>\n                  <ListView locations={matchingLocations} query={this.state.query} onQueryUpdate={this.updateQuery} moreInfo={this.moreInfo}/>\n                  <MapContainer googleMapsLoaded={this.state.googleMapsLoaded} google={this.state.google} locations={matchingLocations}/>\n              </div>\n    )\n    }\n      return (content)\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport classes from './map.module.css';\r\n\r\n\r\nconst Map= (props)=>{\r\n    var styles = [\r\n          {\r\n            featureType: 'water',\r\n            stylers: [\r\n              { color: '#19a0d8' }\r\n            ]\r\n          },{\r\n            featureType: 'administrative',\r\n            elementType: 'labels.text.stroke',\r\n            stylers: [\r\n              { color: '#ffffff' },\r\n              { weight: 6 }\r\n            ]\r\n          },{\r\n            featureType: 'administrative',\r\n            elementType: 'labels.text.fill',\r\n            stylers: [\r\n              { color: '#e85113' }\r\n            ]\r\n          },{\r\n            featureType: 'road.highway',\r\n            elementType: 'geometry.stroke',\r\n            stylers: [\r\n              { color: '#efe9e4' },\r\n              { lightness: -40 }\r\n            ]\r\n          },{\r\n            featureType: 'transit.station',\r\n            stylers: [\r\n              { weight: 9 },\r\n              { hue: '#e85113' }\r\n            ]\r\n          },{\r\n            featureType: 'road.highway',\r\n            elementType: 'labels.icon',\r\n            stylers: [\r\n              { visibility: 'off' }\r\n            ]\r\n          },{\r\n            featureType: 'water',\r\n            elementType: 'labels.text.stroke',\r\n            stylers: [\r\n              { lightness: 100 }\r\n            ]\r\n          },{\r\n            featureType: 'water',\r\n            elementType: 'labels.text.fill',\r\n            stylers: [\r\n              { lightness: -100 }\r\n            ]\r\n          },{\r\n            featureType: 'poi',\r\n            elementType: 'geometry',\r\n            stylers: [\r\n              { visibility: 'on' },\r\n              { color: '#f0e4d3' }\r\n            ]\r\n          },{\r\n            featureType: 'road.highway',\r\n            elementType: 'geometry.fill',\r\n            stylers: [\r\n              { color: '#efe9e4' },\r\n              { lightness: -25 }\r\n            ]\r\n          }\r\n        ];\r\n        function initMap() {\r\n        let map= new props.google.maps.Map(document.getElementById(props.id),{\r\n            center:{lat: 40.7413549, lng: -73.9980244},\r\n            zoom:14,\r\n            styles:styles,\r\n            streetViewControl:false,\r\n            mapTypeControl:false\r\n          })\r\n          //console.log(map)\r\n          window.map=map\r\n        }\r\n        window.addEventListener('load',function(){\r\n          if(props.googleMapsLoaded){\r\n              initMap();\r\n            }\r\n        })\r\n\r\n        return (\r\n          <div id={props.id} className={classes.map}></div>\r\n        )\r\n}\r\n\r\nexport default Map;\r\n","\r\nexport const createMarker =(props)=>{\r\n  let marker= new window.google.maps.Marker({\r\n    position:props.position,\r\n    id:props.id,\r\n    title:props.name,\r\n    animation:window.google.maps.Animation.DROP\r\n  })\r\n  return marker\r\n}\r\n","export const createInfoWindow=()=> {\r\n  let infoWindow=new window.google.maps.InfoWindow();\r\n  return infoWindow\r\n}\r\n","export const createStreetView= (props) =>{\r\n  let streetViewService= new window.google.maps.StreetViewService();\r\n  streetViewService.getPanorama({location:props.position,radius:50},function(data,status){\r\n    if(status==='OK') {\r\n      let panorama= new window.google.maps.StreetViewPanorama(document.getElementById('pano'))\r\n      panorama.setPano(data.location.pano)\r\n      panorama.setPov({\r\n        heading:window.google.maps.geometry.spherical.computeHeading(data.location.latLng,props.position),\r\n        pitch:30\r\n      })\r\n      panorama.setVisible(true);\r\n    }\r\n    else document.getElementById('pano').textContent='No Street View found';\r\n  })\r\n}\r\n","import React  from 'react';\r\nimport classes from './mapcontainer.module.css';\r\nimport Map from '../map/Map';\r\nimport { createMarker } from '../Marker/Marker';\r\nimport { createInfoWindow } from '../InfoWindow';\r\nimport { createStreetView } from '../streetView/StreetView';\r\nimport Menu from '../../menu.svg';\r\n\r\n\r\n\r\n\r\nconst markers=[]\r\nclass MapContainer extends React.PureComponent {\r\n  state={\r\n    bounds:new this.props.google.maps.LatLngBounds()\r\n\r\n  }\r\n\r\n  componentDidMount(){\r\n\r\n  }\r\n  componentDidUpdate(){\r\n    if(markers.length===0){\r\n      this.createMarkers();\r\n      this.populateInfoWindow();\r\n    }\r\n    this.renderMarkers();\r\n  }\r\n\r\n  createMarkers = () =>{\r\n    let marker;\r\n    for(let location of this.props.locations){\r\n      marker=createMarker(location)\r\n      markers.push(marker)\r\n      this.state.bounds.extend(marker.position)\r\n      }\r\n      window.markers=markers;\r\n    }\r\n    renderMarkers=()=>{\r\n      if(markers.length!==0){\r\n        for(let marker of markers){\r\n          marker.setMap(null)\r\n        }\r\n      }\r\n      // THis ensures only markers that match the search query are rendered\r\n      let currentLocationNames=[];\r\n      for(let place of this.props.locations ){\r\n        currentLocationNames.push(place.name)\r\n      }\r\n      //console.log(currentLocationNames)\r\n      for(let i=0;i<markers.length;i++ ){\r\n        if(currentLocationNames.includes(markers[i].title)){\r\n          setTimeout(()=>{\r\n            markers[i].setMap(window.map)\r\n          },i*300)\r\n        }\r\n        else{  continue }\r\n      }\r\n    window.map.fitBounds(this.state.bounds);\r\n    }\r\n    // Creates the infoWindow object and populates it with the streetView Panorama\r\n    populateInfoWindow =() =>{\r\n      let currentMarker=null\r\n      const infoWindow=createInfoWindow();\r\n      for(let marker of markers) {\r\n        marker.addListener('click', function() {\r\n          if(currentMarker===this) return\r\n          for(let marker of markers){\r\n            if(marker!==this) marker.setAnimation(null)\r\n          }\r\n          const self=this;\r\n          infoWindow.marker=this\r\n          infoWindow.setContent(`<div>${this.title}<div id=\"pano\" ></div><div>`)\r\n          createStreetView(this);\r\n          infoWindow.open(window.map,this)\r\n          this.setAnimation(window.google.maps.Animation.BOUNCE)\r\n          infoWindow.addListener('closeclick',function(){\r\n            infoWindow.marker=null\r\n            currentMarker=null;\r\n            self.setAnimation(null)\r\n          })\r\n          currentMarker=this;\r\n        })}\r\n      }\r\n      openList=()=>{\r\n        let listView=document.querySelector('#list-container');\r\n        listView.style.width=\"50%\";\r\n      }\r\n\r\n\r\n  render() {\r\n\r\n    return(\r\n      <div  className={classes.map}>\r\n        <div className={classes.menu} onClick={()=>this.openList()}><img src={Menu} alt=\"menu icon\"/></div>\r\n        <Map id={\"map\"} googleMapsLoaded={this.props.googleMapsLoaded} map={classes.map} google={this.props.google}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default MapContainer;\r\n","import React from 'react';\r\nimport classes from './searchInput.module.css';\r\n\r\nconst search = (props) =>{\r\n\r\n  return(\r\n      <div className={classes.searchContainer}>\r\n          <input className={classes.search} type=\"text\" value={props.query} onChange={(event)=> props.onQueryUpdate(event.target.value)} placeholder=\"Search a location in London\" />\r\n      </div>\r\n  )\r\n}\r\nexport default search;\r\n","import React from 'react'\r\nimport classes from './listitem.module.css';\r\n\r\nconst listItem =(props) =>{\r\n\r\n  return(\r\n    <li className={classes.listitem} tabIndex=\"0\" onClick={()=> props.moreInfo(props.id)}>{props.location.name}</li>\r\n  )\r\n}\r\nexport default listItem;\r\n","import React from 'react';\r\nimport classes from './listview.module.css';\r\nimport SearchInput from './searchInput/SearchInput';\r\nimport ListItem from './ListItem';\r\n\r\nconst listView = (props) =>{\r\n  function closeList(){\r\n    let listView=document.querySelector('#list-container');\r\n    listView.style.width=\"0\";\r\n  }\r\n  return(\r\n    <div id=\"list-container\" className={classes.listContainer}>\r\n      <input type=\"button\" className={classes.closeButton} value=\"Close\" onClick={()=>closeList()}/>\r\n      <SearchInput query={props.query} onQueryUpdate={props.onQueryUpdate}/>\r\n      <ul className={classes.list}>{\r\n          props.locations.map((location,index)=>{\r\n            return(<ListItem location={location} key={location.id} id={location.id} moreInfo={props.moreInfo}/>)\r\n          })\r\n        }</ul>\r\n    </div>\r\n  )\r\n}\r\nexport default listView;\r\n","export const placeDetailsService= (name)=>{\r\n  const placeDetailService=new window.google.maps.places.PlacesService(window.map)\r\n        return new Promise((resolve,reject)=>{\r\n          placeDetailService.textSearch({query:name},function(result,status){\r\n            if(status==='OK'){\r\n\r\n              placeDetailService.getDetails({placeId:result[0].place_id,fields:['opening_hours','photo']},function(results,status){\r\n                if(status==='OK'){\r\n\r\n                  resolve( {opening_hours:results.opening_hours,photos:results.photos})\r\n                }\r\n                else resolve('')\r\n              })\r\n            }\r\n        })\r\n      })\r\n  }\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}